# ported from the output of ivy_show here: https://gist.github.com/wilcoxjay/dca00f7ac81ce99e21e38d4b4ce62204

sort node
sort quorum
sort value
sort round
mutable function protocol_current_round(node) : round
mutable relation abs_left_rnd(node,round)
mutable relation abs_proposal(round,value)
immutable relation round_succ(round,round)
immutable relation member(node,quorum)
mutable relation abs_vote(node,round,value)
mutable relation protocol_one_a(round)
mutable relation protocol_proposal(round,value)
mutable relation protocol_one_b(node,round,round,value)
mutable relation protocol_vote(node,round,value)
mutable relation abs_decision(node,round,value)
mutable relation protocol_decision(node,round,value)
immutable relation round_lt(round, round)
immutable constant round_zero: round

axiom [quorum_intersection_axiom55] forall Q1,Q2. (exists N. member(N,Q1) & member(N,Q2))
axiom [round_spec_prop2] round_succ(X,Z) -> round_lt(X, Z) & !(round_lt(X, Y) & round_lt(Y, Z))
axiom [round_spec_transitivity] round_lt(T, U) & round_lt(U, V) -> round_lt(T, V)
axiom [round_spec_antisymmetry] !(round_lt(T, U) & round_lt(U, T))
axiom [round_spec_totality] round_lt(T, U) | T = U | round_lt(U, T)
axiom [round_spec_zero_min] !round_lt(X, round_zero)

init !abs_left_rnd(N,R)
init !abs_proposal(R,V)
init !abs_vote(N,R,V)
init !abs_decision(N,R,V)

init !protocol_one_a(R)
init !protocol_one_b(N,R,MAXR,V)
init protocol_current_round(N) = round_zero
init !protocol_proposal(R,V)
init !protocol_vote(N,R,V)
init !protocol_decision(N,R,V)

safety [protocol_safety] protocol_decision(N1,R1,V1) & protocol_decision(N2,R2,V2) -> V1 = V2
invariant [protocol_conj63] protocol_current_round(N) = R & (round_lt(R, R2) | R = R2) -> !abs_left_rnd(N,R2)
invariant [protocol_conj64] protocol_current_round(N) = R & round_lt(R2, R) -> abs_left_rnd(N,R2)
invariant [protocol_conj65] protocol_vote(N,R,V) <-> abs_vote(N,R,V)
invariant [protocol_conj66] protocol_decision(N,R,V) <-> abs_decision(N,R,V)
invariant [protocol_conj67] protocol_proposal(R,V) <-> abs_proposal(R,V)
invariant [protocol_conj68] protocol_one_b(N,R,MAXR,V) & protocol_current_round(N) = R2 -> (round_lt(R, R2) | R = R2)
invariant [protocol_conj69] protocol_one_b(N,R,MAXR,V) & MAXR != round_zero -> abs_vote(N,MAXR,V) & (forall V,R2. round_lt(MAXR, R2) & round_lt(R2, R) -> !abs_vote(N,R2,V))
invariant [protocol_conj70] protocol_one_b(N,R,round_zero,V) & round_lt(R2, R) -> !abs_vote(N,R2,V2)
invariant [protocol_conj71] protocol_one_b(N,R,MAXR,V) -> round_lt(MAXR, R)

# for every assert, there is an additional safety property that checks that the path condition implies it.
# in this file, the path condition is always just the preconditions

safety [cast_vote_asserts]
  forall n,r,v.
    & (forall N1,R1,V1,N2,R2,V2. abs_decision(N1,R1,V1) & abs_decision(N2,R2,V2) -> V1 = V2)
    & protocol_current_round(n) = r
    & protocol_proposal(r,v)
    ->
    & ~abs_left_rnd(n,r)
    & abs_proposal(r,v)

transition ext_protocol_cast_vote(n:node,v:value,r:round)
  modifies protocol_vote, abs_vote
  & (forall N1,R1,V1,N2,R2,V2. abs_decision(N1,R1,V1) & abs_decision(N2,R2,V2) -> V1 = V2)
  & protocol_current_round(n) = r
  & protocol_proposal(r,v)
  & (new(protocol_vote(N,R,V)) <-> protocol_vote(N,R,V) | N = n & R = r & V = v)
  # call abs_cast_vote(n, v, r)
    # assert ~abs.left_rnd(n,r);
    # assert abs.proposal(r,v);
    & (new(abs_vote(N,R,V)) <-> abs_vote(N,R,V) | N = n & R = r & V = v)
    # jrw: next line not needed because abs_decision not modified
    # assume abs.decision(N1,R1,V1) & abs.decision(N2,R2,V2) -> V1 = V2

safety [decide_assert]
  forall r,v,q.
  & (forall N1,R1,V1,N2,R2,V2. abs_decision(N1,R1,V1) & abs_decision(N2,R2,V2) -> V1 = V2)
  & (forall N. member(N,q) -> protocol_vote(N,r,v))
  ->
  forall N. member(N,q) -> abs_vote(N,r,v)

transition ext_protocol_decide(n:node,v:value,r:round,q:quorum)
  modifies protocol_decision, abs_decision
  & (forall N1,R1,V1,N2,R2,V2. abs_decision(N1,R1,V1) & abs_decision(N2,R2,V2) -> V1 = V2)
  & (forall N. member(N,q) -> protocol_vote(N,r,v))
  & (forall N,R,V. new(protocol_decision(N,R,V)) <-> protocol_decision(N,R,V) | N = n & R = r & V = v)
  # call abs.decide(n, r, v, q)
     # assert forall N. member(N,q) -> abs.vote(N,r,v);
    & (forall N,R,V. new(abs_decision(N,R,V)) <-> abs_decision(N,R,V) | N = n & R = r & V = v)
    & new(forall N1,R1,V1,N2,R2,V2. abs_decision(N1,R1,V1) & abs_decision(N2,R2,V2) -> V1 = V2)

safety [propose_asserts]
  forall r,q,maxr,v.
  & (forall N1,R1,V1,N2,R2,V2. abs_decision(N1,R1,V1) & abs_decision(N2,R2,V2) -> V1 = V2)
  & (forall V. !protocol_proposal(r,V))
  & (forall N. member(N,q) -> (exists V,MAXR. protocol_one_b(N,r,MAXR,V)))
  # TODO(jrw): think about the quantifier alternations here, since it's in negative position
  & (| (forall N. member(N,q) -> (exists V. protocol_one_b(N,r,round_zero,V)))
     | (& (exists N. member(N,q) & round_lt(maxr, r) & protocol_one_b(N,r,maxr,v))
        & (forall V,N,R. member(N,q) & round_lt(R, r) & protocol_one_b(N,r,R,V) -> (round_lt(R, maxr) | R = maxr))))
  ->
  & (forall V. ~abs_proposal(r,V))
  & (forall N,R. member(N,q) & round_lt(R, r) -> abs_left_rnd(N,R))
  & (| (forall V,N,R. ~(member(N,q) & round_lt(R, r) & abs_vote(N,R,V)))
     | (& (exists N. member(N,q) & round_lt(maxr, r) & abs_vote(N,maxr,v))
        & (forall V,N,R. member(N,q) & round_lt(R, r) & abs_vote(N,R,V) -> (round_lt(R, maxr) | R = maxr))))

transition ext_protocol_propose(r:round,q:quorum,maxr:round,v:value)
  modifies protocol_proposal, abs_proposal
  & (forall N1,R1,V1,N2,R2,V2. abs_decision(N1,R1,V1) & abs_decision(N2,R2,V2) -> V1 = V2)
  & (forall V. !protocol_proposal(r,V))
  & (forall N. member(N,q) -> (exists V,MAXR. protocol_one_b(N,r,MAXR,V)))
  & ((forall N. member(N,q) -> (exists V. protocol_one_b(N,r,round_zero,V))) |
      (exists N. member(N,q) & round_lt(maxr, r) & protocol_one_b(N,r,maxr,v)) &
      (forall V,N,R. member(N,q) & round_lt(R, r) & protocol_one_b(N,r,R,V) -> (round_lt(R, maxr) | R = maxr)))
  & (forall R,V. new(protocol_proposal(R,V)) <-> protocol_proposal(R,V) | R = r & V = v)
  # call abs.propose(r, q, maxr, v)
    # assert ~abs.proposal(r,V);
    # assert forall N,R. member(N,q) & R:round < r -> abs.left_rnd(N,R);
    # assert (forall V,N,R. ~(member(N,q) & R:round < r & abs.vote(N,R,V))) |
    #        (exists N. member(N,q) & maxr < r & abs.vote(N,maxr,v)) & (forall V,N,R. member(N,q) & R < r & abs.vote(N,R,V) -> R <= maxr);
    & (forall R,V. new(abs_proposal(R,V)) <-> abs_proposal(R,V) | R = r & V = v)
    # jrw: next line not needed because abs_decision not modified
    # assume abs.decision(N1,R1,V1) & abs.decision(N2,R2,V2) -> V1 = V2

transition ext_protocol_send_1a(r:round)
  modifies protocol_one_a
  & (forall N1,R1,V1,N2,R2,V2. abs_decision(N1,R1,V1) & abs_decision(N2,R2,V2) -> V1 = V2)
  & (forall R. new(protocol_one_a(R)) <-> protocol_one_a(R) | R = r)

safety [send_1b_asserts]
  forall n,r,maxr,maxv.
  & (forall N1,R1,V1,N2,R2,V2. abs_decision(N1,R1,V1) & abs_decision(N2,R2,V2) -> V1 = V2)
  & round_lt(protocol_current_round(n), r)
  & protocol_one_a(r)
  & (maxr = round_zero & (forall V,R. !(round_lt(R, r) & protocol_vote(n,R,V))) | maxr != round_zero & (round_lt(maxr, r) & protocol_vote(n,maxr,maxv)) &
      (forall V,R. round_lt(R, r) & protocol_vote(n,R,V) -> (round_lt(R, maxr) | R = maxr)))
  ->
  !abs_left_rnd(n,r)

transition ext_protocol_send_1b(n:node,r:round,maxr:round,maxv:value)
  modifies protocol_current_round, protocol_one_b, abs_left_rnd
  & (forall N1,R1,V1,N2,R2,V2. abs_decision(N1,R1,V1) & abs_decision(N2,R2,V2) -> V1 = V2)
  & round_lt(protocol_current_round(n), r)
  & protocol_one_a(r)
  & (maxr = round_zero & (forall V,R. !(round_lt(R, r) & protocol_vote(n,R,V))) | maxr != round_zero & (round_lt(maxr, r) & protocol_vote(n,maxr,maxv)) &
      (forall V,R. round_lt(R, r) & protocol_vote(n,R,V) -> (round_lt(R, maxr) | R = maxr)))
  & (forall N. new(protocol_current_round(N)) = if N = n then r else protocol_current_round(N))
  & (forall N,R,MAXR,MAXV. new(protocol_one_b(N,R,MAXR,MAXV)) <-> protocol_one_b(N,R,MAXR,MAXV) | N = n & R = r & MAXR = maxr & MAXV = maxv)
  # call abs.join_round(n, r)
    # jrw: TODO: encode this assert
    # assert !abs.left_rnd(n,r);
    & (forall N, R. new(abs_left_rnd(N,R)) <-> if N = n then abs_left_rnd(n,R) | round_lt(R, r) else abs_left_rnd(N,R))
    # jrw: next line not needed because abs_decision not modified
    # assume abs.decision(N1,R1,V1) & abs.decision(N2,R2,V2) -> V1 = V2




# jrw: how to test this file?

# jrw: updr finds the following invariant proving all safety properties in under 2 minutes.

# invariant !(exists node0, round1, value0. !abs_left_rnd(node0, round_zero) & protocol_one_b(node0, round1, round_zero, value0))
# invariant !(exists node0, round2. abs_left_rnd(node0, round_zero) & !protocol_one_a(round2) & protocol_current_round(node0) = round2)
# invariant !(exists node0, round1, round2. round_lt(round1, round2) & !abs_left_rnd(node0, round1) & protocol_current_round(node0) = round2)
# invariant !(exists node0, round1, round2. !round_lt(round1, round2) & abs_left_rnd(node0, round1) & protocol_current_round(node0) = round2)
# invariant !(exists round1, value0. !abs_proposal(round1, value0) & protocol_proposal(round1, value0))
# invariant !(exists round1, value0. abs_proposal(round1, value0) & !protocol_proposal(round1, value0))
# invariant !(exists node0, round1, value0. !abs_vote(node0, round1, value0) & protocol_vote(node0, round1, value0))
# invariant !(exists node0, round2, value0. abs_vote(node0, round2, value0) & !protocol_vote(node0, round2, value0))
# invariant !(exists node0, round2, value0. !abs_proposal(round2, value0) & abs_vote(node0, round2, value0))
# invariant !(exists node0, round2, round3, value0. round_zero != round2 & protocol_one_b(node0, round3, round2, value0) & !protocol_vote(node0, round2, value0))
# invariant !(exists node0, round0, round1, value0, value1. round_lt(round0, round1) & protocol_one_b(node0, round1, round_zero, value1) & protocol_vote(node0, round0, value0))
# invariant !(exists node1, round2, round3, value0. round_zero != round3 & !round_lt(round3, round2) & protocol_one_b(node1, round2, round3, value0))
# invariant !(exists node0, round1, value0. !abs_decision(node0, round1, value0) & protocol_decision(node0, round1, value0))
# invariant !(exists N1, R1, V1, N2, R2, V2. protocol_decision(N1, R1, V1) & protocol_decision(N2, R2, V2) & V1 != V2)
# invariant !(exists node0, round1, round2, round3, value0, value1. round_lt(round2, round1) & !round_lt(round2, round3) & !protocol_one_b(node0, round1, round2, value1) & protocol_one_b(node0, round1, round3, value1) & protocol_vote(node0, round2, value0))
# invariant !(exists node0, round1, round2, round3, value0. round_lt(round2, round1) & !abs_left_rnd(node0, round2) & protocol_one_b(node0, round1, round3, value0))

# jrw: one interesting thing to note about this invariant is that it does not mention the quorum sort at all

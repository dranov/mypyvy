################################################################################
#
# The protocol itself.  This closely follows the algorithm written in Figure 9 of
#
#  J. Hoenicke, R. Majumdar, A. Podelski: Thread Modularity at Many Levels. POPL 2017
#
# The locations match the line number in the figure.
#
################################################################################

# this file has been manually translated from Ivy to mypyvy

# we distinguish between processors and pagemaps -- the above paper misused
# processors for both.
#
# pageentry is an abstract type to represent the value in a pagemap (the paper used integers).
#
sort processor
sort pmap
sort pageentry

# the locations closely match the line numbers in Figure 9
# sort location = {i1,i2,i3,i4,i5,i6,i7,i8,i9,i11,i12,i14,i15,
#                  m2,m3,m5,
#                  r1,r2,r3,r5,r6,r7,r8,
#                  b1}
sort location @no_minimize @printed_by(const_printer) @no_print

immutable constant i1: location   @no_print
immutable constant i2: location   @no_print
immutable constant i3: location   @no_print
immutable constant i4: location   @no_print
immutable constant i5: location   @no_print
immutable constant i6: location   @no_print
immutable constant i7: location   @no_print
immutable constant i8: location   @no_print
immutable constant i9: location   @no_print
immutable constant i11: location  @no_print
immutable constant i12: location  @no_print
immutable constant i14: location  @no_print
immutable constant i15: location  @no_print
immutable constant m2: location   @no_print
immutable constant m3: location   @no_print
immutable constant m5: location   @no_print
immutable constant r1: location   @no_print
immutable constant r2: location   @no_print
immutable constant r3: location   @no_print
immutable constant r5: location   @no_print
immutable constant r6: location   @no_print
immutable constant r7: location   @no_print
immutable constant r8: location   @no_print
immutable constant b1: location   @no_print


axiom distinct(i1,i2,i3,i4,i5,i6,i7,i8,i9,i11,i12,i14,i15,m2,m3,m5,r1,r2,r3,r5,r6,r7,r8,b1)

axiom forall L:location.
    L = i1 | L = i2 | L = i3 | L = i4 | L = i5 | L = i6 | L = i7 | L = i8 | L = i9 | L = i11 | L = i12 | L = i14 | L = i15 |
    L = m2 | L = m3 | L = m5 |
    L = r1 | L = r2 | L = r3 | L = r5 | L = r6 | L = r7 | L = r8 |
    L = b1


mutable function pc(processor):location

mutable function userpmap(processor):pmap
# this variable is called pmap in the paper
mutable function writepmap(processor):pmap
mutable relation actionlock(processor)
mutable relation actionneeded(processor)
mutable relation active(processor)
mutable relation interrupt(processor)
# this represents the cpu variable as relation
mutable relation currentcpu(processor, processor)
mutable relation plock(pmap)
mutable function tlb(processor):pageentry
mutable function pentry(pmap):pageentry

# elements to iterate in the for cpu != pid loops.
mutable relation todo(processor, processor)

# error is set if some assertions fails, e.g. lock not held on unlock.
mutable relation error

init pc(P)=b1
init !currentcpu(P,C)
init !plock(P)
init !actionlock(P) & !actionneeded(P) & !interrupt(P) & active(P)
init !error

# i1: active := false   we also havoc writepmap here
transition initiator1(p:processor, m:pmap)
  modifies active, writepmap, pc
    & pc(p) = i1
    & (forall P. new(active(P)) <-> active(P) & P != p)
    & (forall P. P != p -> new(writepmap(P)) = writepmap(P))
    & new(writepmap(p)) = m
    & (forall P. P != p -> new(pc(P)) = pc(P))
    & new(pc(p)) = i2


# i2: lock plock(writepmap)
# Also prepares for cpu != pid loop.
# Note that we busy-loop if lock is taken.  This is necessary to
# detect deadlock as non-terminating runs.
transition initiator2(p:processor)
  modifies pc, plock, todo
    & pc(p) = i2
    & if !plock(writepmap(p)) then
        & (forall P. new(plock(P)) <-> plock(P) | P = writepmap(p))
        & (forall P,X. P != p -> (new(todo(P,X)) <-> todo(P,X)))
        & (forall X. new(todo(p,X)) <-> pc(X) != b1 & p != X)
        & (forall P. P != p -> new(pc(P)) = pc(P))
        & new(pc(p)) = i3
      else  # nop
        & (forall P. new(plock(P)) <-> plock(P))
        & (forall P,X. new(todo(P,X)) <-> todo(P,X))
        & (forall P. new(pc(P)) = pc(P))


# i3: for cpu != pid
# This translates for (cpu != pid)
# if todo contains a cpu, it is set in the currentcpu relation and we enter the loop
transition initiator3(p:processor, cpu:processor)
  modifies currentcpu, todo, pc
    & pc(p) = i3
    & todo(p, cpu)
    & (forall P,X. P != p -> (new(currentcpu(P,X)) <-> currentcpu(P,X)))
    & (forall X. new(currentcpu(p,X)) <-> X = cpu)
    & (forall P,X. new(todo(P,X)) <-> todo(P,X) & !(P = p & X = cpu))
    & (forall P. P != p -> new(pc(P)) = pc(P))
    & new(pc(p)) = i4


# Otherwise if todo list is empty, we leave the loop
# and prepare the next for pid != cpu loop.
transition initiator3exit(p:processor)
  modifies todo, pc
    & pc(p) = i3
    & (forall X. !todo(p, X))
    & (forall P,X. P != p -> (new(todo(P,X)) <-> todo(P,X)))
    & (forall X. new(todo(p, X)) <-> new(pc(X)) != b1 & X != p)
    & (forall P. P != p -> new(pc(P)) = pc(P))
    & new(pc(p)) = i9

# i4:    if userpmap[cpu] = pmap
transition initiator4(p:processor, cpu:processor)
  modifies pc
  & pc(p) = i4
  & currentcpu(p, cpu)
  & (forall P. P != p -> new(pc(P)) = pc(P))
  & if userpmap(cpu) = writepmap(p)
    then new(pc(p)) = i5
    else new(pc(p)) = i3

# i5:        lock actionlock[cpu]
transition initiator5(p:processor, cpu:processor)
  modifies actionlock, pc
    & pc(p) = i5
    & currentcpu(p, cpu)
    & if !actionlock(cpu)
      then
        & (forall C. new(actionlock(C)) <-> actionlock(C) | C = cpu)
        & (forall P. P != p -> new(pc(P)) = pc(P))
        & new(pc(p)) = i6
      else
        & (forall C. new(actionlock(C)) <-> actionlock(C))
        & (forall P. new(pc(P)) = pc(P))

# i6:        actionneeded[cpu] := true
transition initiator6(p:processor, cpu:processor)
  modifies actionneeded, pc
    & pc(p) = i6
    & currentcpu(p, cpu)
    & (forall C. new(actionneeded(C)) <-> actionneeded(C) | C = cpu)
    & (forall P. P != p -> new(pc(P)) = pc(P))
    & new(pc(p)) = i7

# i7:        unlock actionlock[cpu]
transition initiator7(p:processor, cpu:processor)
  modifies error, actionlock, pc
    & pc(p) = i7
    & currentcpu(p, cpu)
    & if !actionlock(cpu)
      then new(error)
      else new(error) = error
    & (forall C. new(actionlock(C)) <-> actionlock(C) & C != cpu)
    & (forall P. P != p -> new(pc(P)) = pc(P))
    & new(pc(p)) = i8

# i8:        interrupt[cpu] := true
transition initiator8(p:processor, cpu:processor)
  modifies interrupt, pc
    & pc(p) = i8
    & currentcpu(p, cpu)
    & (forall C. new(interrupt(C)) <-> interrupt(C) | C = cpu)
    & (forall P. P != p -> new(pc(P)) = pc(P))
    & new(pc(p)) = i3

# i9: for cpu != pid
# i10:    wait until !active[cpu] | userpmap[cpu] != writepmap
transition initiator9(p:processor, cpu:processor)
  modifies todo
    & pc(p) = i9
    & todo(p, cpu)
    & if !active(cpu) | userpmap(cpu) != writepmap(p)
      then
        (forall P,C. new(todo(P,C)) <-> todo(P,C) & !(P = p & C = cpu))
      else
        (forall P,C. new(todo(P,C)) <-> todo(P,C))

transition initiator9exit(p:processor)
  modifies pc
    & pc(p) = i9
    & (forall X. !todo(p, X))
    & (forall P. P != p -> new(pc(P)) = pc(P))
    & new(pc(p)) = i11

# i11: entry[pmap] := *
transition initiator11(p:processor, e:pageentry)
  modifies pentry, pc
    & pc(p) = i11
    & (forall P. P != writepmap(p) -> new(pentry(P)) = pentry(P))
    & (let old_pmap = writepmap(p) in new(pentry(old_pmap)) = e)
    & (forall P. P != p -> new(pc(P)) = pc(P))
    & new(pc(p)) = i12

# i12: if (userpmap = pmap)
# i13:    tlb := entry[pmap]
transition initiator12(p:processor)
  modifies tlb, pc
    & pc(p) = i12
    & (if userpmap(p) = writepmap(p)
       then
         & (forall P. P != p -> new(tlb(P)) = tlb(P))
         & new(tlb(p)) = pentry(writepmap(p))
       else
         (forall P. new(tlb(P)) = tlb(P)))
    & (forall P. P != p -> new(pc(P)) = pc(P))
    & new(pc(p)) = i14

# i14: unlock plock[pmap]
transition initiator14(p:processor)
  modifies error, plock, pc
    & pc(p) = i14
    & (if !plock(writepmap(p))
       then
         new(error)
       else
         (new(error) <-> error))
    & (forall P. P != writepmap(p) -> (new(plock(P)) <-> plock(P)))
    & (let old_pmap = writepmap(p) in !new(plock(old_pmap)))
    & (forall P. P != p -> new(pc(P)) = pc(P))
    & new(pc(p)) = i15

# i15: active := true
transition initiator15(p:processor)
  modifies active, pc
    & pc(p) = i15
    & (forall P. P != p -> new(active(P)) = active(P))
    & new(active(p))
    & (forall P. P != p -> new(pc(P)) = pc(P))
    & new(pc(p)) = m5

# r1: while actionneeded
transition responder1(p:processor)
  modifies pc
    & pc(p) = r1
    & (forall P. P != p -> new(pc(P)) = pc(P))
    & new(pc(p)) = (if actionneeded(p) then r2 else m2)

# r2:   active := false
transition responder2(p:processor)
  modifies active, pc
    & pc(p) = r2
    & (forall P. P != p -> new(active(P)) = active(P))
    & new(active(p)) = false
    & (forall P. P != p -> new(pc(P)) = pc(P))
    & new(pc(p)) = r3

# this must be atomic (bug in original TLB algorithm, see paper)
# r3:   wait until plock[userpmap] = unlocked
# r4:   lock actionlock(p)
transition responder3(p:processor)
  modifies error, actionlock, pc
    & pc(p)=r3
    & if !plock(userpmap(p))
      then
        & (new(error) <-> error | actionlock(p))
        & (forall P. P != p -> (new(actionlock(P)) <-> actionlock(P)))
        & new(actionlock(p))
        & (forall P. P != p -> new(pc(P)) = pc(P))
        & new(pc(p)) = r5
      else
        & (new(error) <-> error)
        & (forall P. new(actionlock(P)) <-> actionlock(P))
        & (forall P. new(pc(P)) = pc(P))

# r5:   tlb := entry[userpmap]
transition responder5(p:processor)
  modifies tlb, pc
    & pc(p) = r5
    & (forall P. P != p -> new(tlb(P)) = tlb(P))
    & new(tlb(p)) = pentry(userpmap(p))
    & (forall P. P != p -> new(pc(P)) = pc(P))
    & new(pc(p)) = r6


# r6:   actionneeded := false
transition responder6(p:processor)
  modifies actionneeded, pc
    & pc(p) = r6
    & (forall P. P != p -> (new(actionneeded(P)) <-> actionneeded(P)))
    & !new(actionneeded(p))
    & (forall P. P != p -> new(pc(P)) = pc(P))
    & new(pc(p)) = r7

# r7:   unlock actionlock
transition responder7(p:processor)
  modifies error, actionlock, pc
    & pc(p) = r7
    & (new(error) <-> error | !actionlock(p))
    & (forall P. P != p -> (new(actionlock(P)) <-> actionlock(P)))
    & !new(actionlock(p))
    & (forall P. P != p -> new(pc(P)) = pc(P))
    & new(pc(p)) = r8

# r8:   active := false
transition responder8(p:processor)
  modifies active, pc
    & pc(p) = r8
    & (forall P. P != p -> (new(active(P)) <-> active(P)))
    & new(active(p))
    & (forall P. P != p -> new(pc(P)) = pc(P))
    & new(pc(p)) = r1


# # m1: while true
# # m2:    assert tlb = entry[userpmap]
transition main2(p:processor)
  modifies error, pc
    & pc(p) = m2
    & (new(error) <-> error | tlb(p) != pentry(userpmap(p)))
    & (forall P. P != p -> new(pc(P)) = pc(P))
    & new(pc(p)) = m3

# # m3:    if (*)
# # m4:        Initiator()
transition main3a(p:processor)
  modifies pc
    & pc(p) = m3
    & (forall P. P != p -> new(pc(P)) = pc(P))
    & new(pc(p)) = i1

transition main3b(p:processor)
  modifies pc
    & pc(p) = m3
    & (forall P. P != p -> new(pc(P)) = pc(P))
    & new(pc(p)) = m5

# # m5:    if (interrupt)
# # m6:        interrupt := false Responder()
transition main5(p:processor)
  modifies interrupt, pc
    & pc(p)=m5
    & if interrupt(p)
      then
        & (forall P. new(interrupt(P)) <-> interrupt(P) & P != p)
        & (forall P. P != p -> new(pc(P)) = pc(P))
        & new(pc(p)) = r1
     else
        & (forall P. new(interrupt(P)) <-> interrupt(P))
        & (forall P. P != p -> new(pc(P)) = pc(P))
        & new(pc(p)) = m2

# # b1: pid := ++n  // create process
# # b2: atomic userpmap := *
# #            assume plock[userpmap] = unlocked
# #            tlb := entry[userpmap]
# # b3: Main()

####### this action is not exported in the ivy model, nor is it used anywhere

# transition boot1(p:processor, m:pmap)
#   modifies userpmap, tlb, pc
#     & old(pc(p)) = b1
#     & !old(plock(m))
#     & (forall P. P != p -> userpmap(P) = old(userpmap(P)))
#     & userpmap(p) = m
#     & (forall P. P != p -> tlb(P) = old(tlb(P)))
#     & tlb(p) = old(pentry(m))
#     & (forall P. P != p -> pc(P) = old(pc(P)))
#     & pc(p) = m2

# show safety
# all invariants are universal with at most two variables (provable at level 2)

# plock(writemap) is taken in i3-i14
invariant pc(P)=i3 | pc(P)=i4 | pc(P)=i5 | pc(P)=i6 | pc(P)=i7 | pc(P)=i8 | pc(P)=i9 | pc(P)=i11 | pc(P)=i12 | pc(P)=i14 -> plock(writepmap(P))
# plock(writemap) ensures mutual exclusion of i3-i14
invariant (pc(P1)=i3 | pc(P1)=i4 | pc(P1)=i5 | pc(P1)=i6 | pc(P1)=i7 | pc(P1)=i8 | pc(P1)=i9 | pc(P1)=i11 | pc(P1)=i12 | pc(P1)=i14)
         & (pc(P2)=i3 | pc(P2)=i4 | pc(P2)=i5 | pc(P2)=i6 | pc(P2)=i7 | pc(P2)=i8 | pc(P2)=i9 | pc(P2)=i11 | pc(P2)=i12 | pc(P2)=i14)
         -> writepmap(P1) != writepmap(P2) | P1 = P2

# currentcpu has at most one value
invariant currentcpu(P,C1) & currentcpu(P, C2) -> C1 = C2

# actionlock(cpu) is taken in i6-i7
invariant (pc(P)=i6 | pc(P)=i7) & currentcpu(P, C) -> actionlock(C)
# actionlock(p) is taken in r5-r7
invariant (pc(P)=r5 | pc(P)=r6 | pc(P)=r7) -> actionlock(P)
# actionlock(p) ensures mutual exclusion of i6-i7
invariant (pc(P1)=i6 | pc(P1)=i7) & currentcpu(P1, C) & (pc(P2)=i6 | pc(P2)=i7) & currentcpu(P2, C) -> P1 = P2
# actionlock(p) ensures mutual exclusion of r5-r7 and i6-i7
invariant !((pc(P1)=r5 | pc(P1)=r6 | pc(P1)=r7) & (pc(P2)=i6 | pc(P2)=i7) & currentcpu(P2, P1))

# while actionlock(p) is taken outside r5-r7 it can only be if someone is in i6-i7, so plock(userpmap) should hold
invariant actionlock(C) & !(pc(C)=r5 | pc(C)=r6 | pc(C)=r7) -> plock(userpmap(C))
# and then no other process with the same writemap can be in i3-i14
invariant actionlock(C) & !(pc(C)=r5 | pc(C)=r6 | pc(C)=r7) &
   (pc(P)=i3 | pc(P)=i4 | pc(P)=i5 | pc(P)=i6 | pc(P)=i7 | pc(P)=i8 | pc(P)=i9 | pc(P)=i11 | pc(P)=i12 | pc(P)=i14) ->
   userpmap(C) != writepmap(P) | (currentcpu(P,C) & (pc(P)=i6 | pc(P)=i7))

# instructions i5-i7 are only executed if writepmap = userpmap(cpu)
invariant (pc(P)=i5 | pc(P)=i6 | pc(P)=i7) & currentcpu(P,C) -> writepmap(P) = userpmap(C)

# active is only exactly set in these limited locations
invariant active(P) <->
  (pc(P)=b1 | pc(P)=m2 | pc(P)=m3 | pc(P) = m5 | pc(P) = i1 | pc(P) = r1 | pc(P) = r2)

# If we already iterated over a process C in the i3-i8 loop of P or if we are currently iterating and we
# are past the i6 instruction, and userpmap(C) = writepmap(P) then we set the actionneeded flag, so it is
# still set and C cannot enter the actionlock
invariant (pc(P)=i3 | pc(P)=i7 | pc(P)=i8) & !todo(P,C) & pc(C) != b1 & userpmap(C) = writepmap(P) -> (actionneeded(C) & pc(C)!=r5  & pc(C)!=r6) | P = C
invariant (pc(P)=i4 | pc(P)=i5 | pc(P)=i6) & !todo(P,C) & !currentcpu(P,C) & pc(C) != b1 & userpmap(C) = writepmap(P) -> (actionneeded(C) & pc(C)!=r5  & pc(C)!=r6) | P = C
# The same if we are in the i9 loop or in i11
invariant (pc(P)=i9 | pc(P)=i11) & pc(C) != b1 & userpmap(C) = writepmap(P) -> (actionneeded(C) & pc(C)!=r5  & pc(C)!=r6) | P = C

# When the tlb(P) is incorrect actionneded(P) is still set (unless we changed our own tlb, but then
# we are in i12 where we fix it in the next step)
# invariant pc(P) != b1 & tlb(P) != pentry(userpmap(P)) -> (actionneeded(P) & pc(P)!=r6) | (pc(P)=i12 & userpmap(P) = writepmap(P))
# rewritten to use function depth 1:
invariant pc(P) != b1 & M = userpmap(P) & tlb(P) != pentry(M) -> (actionneeded(P) & pc(P)!=r6) | (pc(P)=i12 & M = writepmap(P))

# If we already iterated over a process C in the i3-i8 loop of P and userpmap(C) = writepmap(P) then
# we set the interrupt flag, so it is still set or C is in the interrupt routine
invariant (pc(P)=i3) & !todo(P,C) & pc(C) != b1 & userpmap(C) = writepmap(P) -> interrupt(C) | P = C | (pc(C)=r1 | pc(C)=r2 | pc(C)=r3)
invariant (pc(P)=i4 | pc(P)=i5 | pc(P)=i6 | pc(P)=i7 | pc(P)=i8) & !todo(P,C) & pc(C) != b1 & !currentcpu(P,C) & userpmap(C) = writepmap(P) -> interrupt(C) | P = C | (pc(C)=r1 | pc(C)=r2 | pc(C)=r3)
invariant (pc(P)=i9 | pc(P)=i11) & pc(C) != b1 & userpmap(C) = writepmap(P) -> interrupt(C) | P = C | (pc(C)=r1 | pc(C)=r2 | pc(C)=r3)
# When the tlb(C) is incorrect the process must be interrupted
# invariant tlb(C) != pentry(userpmap(C)) & pc(C) != b1 -> interrupt(C) | (pc(C)=r1 | pc(C)=r2 | pc(C)=r3 | pc(C) = r5) | (pc(C)=i12 & writepmap(C) = userpmap(C))
# rewritten to use function depth 1:
invariant M = userpmap(C) & tlb(C) != pentry(M) & pc(C) != b1 -> interrupt(C) | (pc(C)=r1 | pc(C)=r2 | pc(C)=r3 | pc(C) = r5) | (pc(C)=i12 & writepmap(C) = userpmap(C))

# We wait for a process in the i9 loop at least until it leaves m2 and it cannot enter m2 again before i11
invariant ((pc(P)=i9 & !todo(P,C)) | pc(P)=i11) & userpmap(C) = writepmap(P) -> pc(C)!=m2
# When the tlb(C) is incorrect the process is not in m2
# invariant tlb(P) != pentry(userpmap(P)) -> pc(P)!=m2
# rewritten to use function depth 1:
invariant M = userpmap(P) & tlb(P) != pentry(M) -> pc(P)!=m2


safety !error

# updr infers the following trivial invariant proving that no process ever boots
# invariant forall P:processor. pc(P) = b1
# invariant forall P:processor, C:processor. !currentcpu(P, C)
# invariant forall P:pmap. !plock(P)
# invariant forall P:processor. !actionlock(P) & !actionneeded(P) & !interrupt(P) & active(P)
# invariant !error

sort node
sort value
sort quorum
sort round

immutable constant none: round
immutable relation le(round, round)

#
axiom forall X:round. le(X, X)
axiom forall X:round, Y:round, Z:round. le(X, Y) & le(Y, Z) -> le(X, Z)
axiom forall X:round, Y:round. le(X, Y) & le(Y, X) -> X = Y
axiom forall X:round, Y:round. le(X, Y) | le(Y, X)

immutable relation member(node, quorum)
axiom forall Q1:quorum, Q2:quorum. exists N:node. member(N, Q1) & member(N, Q2)

mutable relation one_a(round)
mutable relation one_b(node, round)
mutable relation left_round(node, round)
mutable relation proposal(round, value)
mutable relation vote(node, round, value)
mutable relation decision(round, value)

mutable function decision_quorum(round, value): quorum

mutable relation active_node(node)
mutable relation active_value(value)
mutable relation active_quorum(quorum)
mutable relation active_round(round)

# 
init forall N. active_node(N)
init forall V. active_value(V)
init forall Q. active_quorum(Q)
init forall R. active_round(R)

init forall R:round. !one_a(R)
init forall N:node, R:round. !one_b(N, R)
init forall N:node, R:round. !left_round(N, R)
init forall R:round, V:value. !proposal(R, V)
init forall N:node, R:round, V:value. !vote(N, R, V)
init forall R:round, V:value. !decision(R, V)

transition send_1a(r:round)
  modifies one_a
  active_round(r) &
  (r != none &
  (forall R:round. active_round(R) -> (new(one_a(R)) <-> one_a(R) | R = r)))

transition join_round(n:node, r:round)
  modifies one_b, left_round
  active_node(n) &
  active_round(r) &
  (r != none &
  one_a(r) &
  !left_round(n, r) &
  (forall N:node, R:round. active_node(N) & active_round(R) -> (new(one_b(N, R)) <-> one_b(N, R) | N = n & R = r)) &
  (forall N:node, R:round. active_node(N) & active_round(R) -> (new(left_round(N, R)) <-> left_round(N, R) | N = n & !le(r, R))))

transition propose(r:round, q:quorum, maxr:round, v:value)
  modifies proposal
  active_round(r) &
  active_quorum(q) &
  active_round(maxr) &
  active_value(v) &
  (r != none &
  (forall V:value. active_value(V) -> !proposal(r, V)) &
  (forall N:node. active_node(N) -> member(N, q) -> one_b(N, r)) &
  (maxr = none &
    (forall N:node, MAXR:round, V:value. active_node(N) & active_round(MAXR) & active_value(V) -> !(member(N, q) & !le(r, MAXR) & vote(N, MAXR, V)))
  | maxr != none &
    (exists N:node. active_node(N) & (member(N, q) & !le(r, maxr) & vote(N, maxr, v))) &
    (forall N:node, MAXR:round, V:value. active_node(N) & active_round(MAXR) & active_value(V) -> member(N, q) & !le(r, MAXR) & vote(N, MAXR, V) -> le(MAXR, maxr))) &
  (forall R:round, V:value. active_round(R) & active_value(V) -> (new(proposal(R, V)) <-> proposal(R, V) | R = r & V = v)))

transition cast_vote(n:node, v:value, r:round)
  modifies vote
  active_node(n) &
  active_value(v) &
  active_round(r) &
  (r != none &
  !left_round(n, r) &
  proposal(r, v) &
  (forall N:node, R:round, V:value. active_node(N) & active_round(R) & active_value(V) -> (new(vote(N, R, V)) <-> vote(N, R, V) | N = n & R = r & V = v)))

transition decide(r:round, v:value, q:quorum)
  modifies decision, decision_quorum
  active_round(r) &
  active_value(v) &
  active_quorum(q) &
  (r != none &
  (forall N:node. active_node(N) -> member(N, q) -> vote(N, r, v)) &
  (forall R:round, V:value. active_round(R) & active_value(V) -> (new(decision(R, V)) <-> decision(R, V) | R = r & V = v)) &
  (forall R:round, V:value. active_round(R) & active_value(V) -> !(R = r & V = v) -> new(decision_quorum(R, V)) = decision_quorum(R, V)) &
  new(decision_quorum(r, v)) = q)

transition decrease_domain()
  modifies active_node, active_value, active_quorum, active_round
  (forall N. new(active_node(N)) -> active_node(N)) &
  (forall V. new(active_value(V)) -> active_value(V)) &
  (forall Q. new(active_quorum(Q)) -> active_quorum(Q)) &
  (forall R. new(active_round(R)) -> active_round(R)) &
  new(active_round(none)) &
  (forall R, V. new(active_round(R)) & new(active_value(V)) -> let old_quorum = decision_quorum(R, V) in new(active_quorum(old_quorum)))
  & (forall Q1:quorum, Q2:quorum. new(active_quorum(Q1)) & new(active_quorum(Q2)) -> (exists N:node. new(active_node(N)) & (member(N, Q1) & member(N, Q2))))

immutable constant r1: round
immutable constant r2: round
axiom r1 != r2

sat trace {
  send_1a
  join_round(*, r1)
  propose
  cast_vote
          decrease_domain
  decide

   send_1a
   join_round(*, r2)
   propose
   cast_vote
   decide

  assert !(
    forall R1, R2, V1, V2.
    active_round(R1) & active_round(R2) &
    active_value(V1) & active_value(V2)
    -> 
    decision(R1, V1) & decision(R2, V2)
    ->
    V1 = V2
  )
}

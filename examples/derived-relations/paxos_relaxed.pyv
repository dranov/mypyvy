sort node
sort value
sort quorum
sort round

immutable constant none: round
immutable relation le(round, round)

# instantiate total_order(round, le)
axiom le(X,X)
axiom le(X, Y) & le(Y, Z) -> le(X, Z)
axiom le(X, Y) & le(Y, X) -> X = Y
axiom le(X, Y) | le(Y, X)

immutable relation member(node, quorum)
axiom forall Q1, Q2. exists N. member(N, Q1) & member(N, Q2)

mutable relation one_a(round)
mutable relation one_b(node, round)
mutable relation left_round(node, round)
mutable relation proposal(round, value)
mutable relation vote(node, round, value)
mutable relation decision(round, value)

mutable function decision_quorum(round, value): quorum

mutable relation node_active(node)
mutable relation value_active(value)
mutable relation quorum_active(quorum)
mutable relation round_active(round)

# WLOG, the active domain includes everything in the inital state
init node_active(N)
init value_active(V)
init quorum_active(Q)
init round_active(R)

init !one_a(R)
init !one_b(N, R)
init !left_round(N, R)
init !proposal(R, V)
init !vote(N, R, V)
init !decision(R, V)

transition send_1a(r: round)
  modifies one_a
  round_active(r) & 
  r != none &
  (forall R. new(one_a(R)) <-> one_a(R) | R = r)

transition join_round(n: node, r: round)
  modifies one_b, left_round
  node_active(n) & 
  round_active(r) & 
  r != none &
  one_a(r) &
  !left_round(n, r) &
  (forall N, R. new(one_b(N, R)) <-> one_b(N,R) | N = n & R = r) &
  (forall N, R. new(left_round(N, R)) <-> left_round(N, R) | N = n & !le(r, R))

transition propose(r: round, q: quorum, maxr: round, v: value)
  modifies proposal
  round_active(r) &
  quorum_active(q) &
  round_active(maxr) &
  value_active(v) & 
  r != none &
  (forall V. value_active(V) -> !proposal(r, V)) &
  (forall N. node_active(N) & member(N, q) -> one_b(N, r)) &
  ((maxr = none & forall N,MAXR,V. node_active(N) & round_active(MAXR) & value_active(V) -> !(member(N, q) & !le(r,MAXR) & vote(N,MAXR,V))) |
   (maxr != none &
    (exists N. node_active(N) & member(N, q) & !le(r,maxr) & vote(N,maxr,v)) &
    (forall N,MAXR,V. node_active(N) & round_active(MAXR) & value_active(V) & (member(N, q) & !le(r,MAXR) & vote(N,MAXR,V)) -> le(MAXR,maxr)))) &
  (forall R, V. new(proposal(R, V)) <-> proposal(R, V) | (R = r & V = v))

transition cast_vote(n: node, v: value, r: round)
  modifies vote
  node_active(n) &
  value_active(v) &
  round_active(r) & 
  r != none &
  !left_round(n, r) &
  proposal(r, v) &
  (forall N, R, V. new(vote(N, R, V)) <-> vote(N, R, V) | N = n & R = r & V = v)

transition decide(r: round, v: value, q: quorum)
  modifies decision, decision_quorum
  round_active(r) & 
  value_active(v) &
  quorum_active(q) &
  r != none &
  (forall N. node_active(N) & member(N, q) -> vote(N, r, v)) &
  (forall R, V. new(decision(R, V)) <-> decision(R, V) | R = r & V = v)

  & (forall R,V. !(R = r & V = v) -> new(decision_quorum(R, V)) = decision_quorum(R, V))
  & new(decision_quorum(r, v)) = q

transition decrease_domain()
  modifies node_active, value_active, quorum_active, round_active
  (forall N. new(node_active(N)) -> node_active(N)) &
  (forall V. new(value_active(V)) -> value_active(V)) &
  (forall Q. new(quorum_active(Q)) -> quorum_active(Q)) &
  (forall R. new(round_active(R)) -> round_active(R))

  & (forall R, V. new(round_active(R)) & new(value_active(V)) -> let old_quorum = decision_quorum(R,V) in new(quorum_active(old_quorum)))
  & (forall R, V, N. new(round_active(R)) & new(value_active(V)) & new(node_active(N)) -> decision(R,V) & member(N, decision_quorum(R, V)) -> vote(N, R, V))
  & (forall Q, R. new(quorum_active(Q)) & new(round_active(R)) -> (dr(Q,R) -> new(dr(Q,R))))

# derived relation r(quorum, round, round, value):
#   quorum_active(Q0) & round_active(R1) & round_active(R2) & value_active(V0) -> 
#   (r(Q0, R1, R2, V0) <->
#   (exists N0.
#      & node_active(N0)
#      & member(N0,Q0)
#      & left_round(N0,R2)
#      & one_b(N0,R1)
#      & vote(N0,R1,V0)
#   ))

# derived relation r(node, round, value):
#   node_active(N) & round_active(R) & value_active(V) -> 
#   (r(N, R, V) <->
#   left_round(N, R) & !vote(N, R, V))
# 
# derived relation s(round, round, quorum, value):
#   round_active(R1) & round_active(R2) & quorum_active(Q) &
#   value_active(V1) ->
#   (s(R1, R2, Q, V1) <->
#    exists N.
#      & node_active(N)
#      & member(N,Q)
#      & left_round(N,R1)
#      & one_b(N,R2)
#      & r(N,R1,V1))

derived relation dr(quorum, round):
  quorum_active(Q0) & round_active(R0)
  -> 
  (dr(Q0, R0) <->
   (exists N0.
     node_active(N0) &
     member(N0, Q0) &
     left_round(N0, R0) &
     one_b(N0, R0)))

# vote(node0,round0,value0)


# osafety


#  invariant proposal(R,V1) & proposal(R,V2) -> V1 = V2
#  invariant vote(N,R,V) -> proposal(R,V)
#  invariant !vote(N,none,V)
#  invariant one_b(N,R2) & !le(R2,R1) -> left_round(N,R1)
#  
#  #invariant
#  #   forall R1, V1, R2, V2.
#  #     (exists Q. forall N. member(N, Q) -> !left_round(N, R1) | vote(N, R1, V1)) &
#  #     !le(R2, R1) &
#  #     proposal(R2, V2) ->
#  #     V1 = V2
#  
#  #invariant forall R, V, Q.
#  #  choosable(R, V, Q) <->
#  #  (forall N. member(N, Q) -> !left_round(N, R) | vote(N, R, V))
#  
#  invariant
#    forall R1, V1, R2, V2, Q.
#      choosable(R1, V1, Q) ->
#      !le(R2, R1) &
#      proposal(R2, V2) ->
#      V1 = V2
#  
#  
#  invariant
#    forall R, V.
#      decision(R, V) ->
#      forall N. member(N, decision_quorum(R, V)) -> vote(N, R, V)
#  

immutable constant r1: round
immutable constant r2: round
axiom r1 != r2

sat trace {
  send_1a
  join_round(*, r1)
  propose
  cast_vote
  decide

  send_1a
  join_round(*, r2)

  decrease_domain

  propose
  cast_vote
  decide


  assert !(
    forall R1, R2, V1, V2.
    round_active(R1) & round_active(R2) &
    value_active(V1) & value_active(V2)
    -> 
    decision(R1, V1) & decision(R2, V2)
    ->
    V1 = V2
  )
}
